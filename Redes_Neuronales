## Redes Neuronales:

import tensorflow as tf
import pandas as pd
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
# Dividir el dataframe en variables predictoras (X) y variable objetivo (y)
df_salud1= pd.get_dummies(df_salud)
X = df_salud1.drop('readmitted_1', axis=1)
y = df_salud1['readmitted_1']

# Dividir los datos en conjunto de entrenamiento y conjunto de prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Escalar las variables predictoras para mejorar la eficiencia del modelo
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


# Crear el modelo
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compilar el modelo
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Compilar el modelo
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Entrenar el modelo
history = model.fit(X_train, y_train, validation_split=0.2, epochs=20, batch_size=128)

# Evaluar el modelo en el conjunto de prueba y obtener la matriz de confusión
y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5)
cm = confusion_matrix(y_test, y_pred)
print('Matriz de Confusión:\n', cm)

report = classification_report(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
print('Reporte de clasificación:\n', report)
print('Precisión del modelo:', accuracy)

import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

# Dividir el dataframe en variables predictoras (X) y variable objetivo (y)
df_salud1= pd.get_dummies(df_salud)
X = df_salud1.drop('readmitted_1', axis=1)
y = df_salud1['readmitted_1']

# Dividir los datos en conjunto de entrenamiento y conjunto de prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Escalar las variables predictoras para mejorar la eficiencia del modelo
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Definir la arquitectura de la red neuronal
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=[X_train.shape[1]]),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compilar el modelo
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Entrenar el modelo
history = model.fit(X_train, y_train, validation_split=0.2, epochs=20, batch_size=128)

# Evaluar el modelo en el conjunto de prueba y obtener la matriz de confusión
y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5)
cm = confusion_matrix(y_test, y_pred)
print('Matriz de Confusión:\n', cm)

# Obtener otras métricas de evaluación del modelo
report = classification_report(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
print('Reporte de clasificación:\n', report)
print('Precisión del modelo:', accuracy)

# Graficar la matriz de confusión
import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()
