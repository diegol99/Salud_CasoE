##Random Forest

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier


# Seleccionar variables predictoras y variable objetivo
X = df_salud.drop('readmitted', axis=1)
y = df_salud['readmitted']

# Convertir variables categóricas a variables dummy
X = pd.get_dummies(X)

# Dividir en conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
# Definir el modelo
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Entrenar el modelo
rf_model.fit(X_train, y_train)

# Realizar predicciones en el conjunto de prueba
y_pred = rf_model.predict(X_test)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score


# Calcular otras métricas de evaluación
print('Accuracy:', accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
matrix = confusion_matrix(y_test, y_pred)
display = ConfusionMatrixDisplay(confusion_matrix = matrix)
display.plot()
plt.show()

from imblearn.under_sampling import RandomUnderSampler

# X e y son los datos de entrada y las etiquetas, respectivamente
undersampler = RandomUnderSampler(random_state=42)
X_resampled, y_resampled = undersampler.fit_resample(X, y)


from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix

# Se entrena un modelo de Random Forest con el dataset balanceado
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_resampled, y_resampled)

# Se hacen predicciones en el dataset de prueba
y_pred = rf.predict(X_test)

# Se genera la matriz de confusión
cm = confusion_matrix(y_test, y_pred)
print(cm)


from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
matrix = confusion_matrix(y_test, y_pred)
display = ConfusionMatrixDisplay(confusion_matrix = matrix)
display.plot()
plt.show()

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
# Calcular otras métricas de evaluación
print('Accuracy:', accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
